{
  "name": "bakari-promise",
  "version": "0.0.3",
  "description": "bakari promise module",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/earlyH/bakari-promise.git"
  },
  "keywords": [
    "bakari",
    "promise"
  ],
  "author": {
    "name": "early"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/earlyH/bakari-promise/issues"
  },
  "homepage": "https://github.com/earlyH/bakari-promise",
  "readme": "bakari-promise\n==============\n\n##About\n\n`bakari-promise`是bakari框架中的承诺模块。\n\n##Install\n\n通过npm安装bakari-promise。\n\n\tnpm install bakari-promise\n\n##Usage\n\n引入bakari-promise：\n\t\n\tvar Promise = require('bakari-promise');\n\t\n创建并解决一个承诺：\n\n\t// 创建一个承诺\n\tvar promise = Promise();\n\t\n\t// 承诺完成后回掉函数\n\tpromise.done(function(){\n\t\talert('done!');\n\t});\n\t\n\tpromise.resolve(); // alert 'done!'\n\t\n\n##Method\n\n`done(fn)` : 设置承诺解决后的回调函数。\n\n`fail(fn)` : 设置承诺拒绝后的回调函数。\n\n`always(fn)` : 设置承诺处理后的回调函数，无论承诺被解决或拒绝都会执行这个函数。\n\n`then(doneFn, failFn)` : 同时设置承诺解决及拒绝后的回调函数。\n\n`resolve` : 解决一个承诺。\n\n`reject` : 拒绝一个承诺。\n\n\n##传入参数\n\n你可以为承诺传入参数，像这样：\n\n\tvar promise = Promise();\n\t\n\tpromise.done(function( name ){\n\t\talert(name);\n\t});\n\t\n\tpromise.resolve('jim'); // alert 'jim';\n\n##承诺的状态\n\n你可以访问承诺的`status`属性来获取当前承诺的状态。\n\n状态包括：\n\n- pending : 尚未完成\n- resolved : 已解决\n- rejected : 已拒绝\n- resolving : 正在解决\n- rejecting : 正在拒绝\n\n像这样访问：\n\n\tvar promise = Promise();\n\talert(promise.status); // alert 'pending'\n\n\n##立即执行承诺\n\n当承诺已经被处理，设置的回调函数将立即被执行：\n\n\tvar promise = Promise();\n\t\n\tpromise.reject();\n\t\n\tpromise.fail(function(){\n\t\talert('fail!');\n\t});\n\t\n\t// alert 'fail!';\n\t\n##回调函数队列\n\n你可以访问承诺的`callback`属性来获取，回掉函数队列。",
  "readmeFilename": "README.md",
  "_id": "bakari-promise@0.0.3",
  "_from": "bakari-promise@0.0.3"
}
